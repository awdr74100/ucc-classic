// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id        Int                 @id @default(autoincrement())
  audios    AudiosOnMovies[]
  subtitles SubtitlesOnMovies[]
  genres    GenresOnMovies[]
  actors    ActorsOnMovies[]
  directors DirectorsOnMovies[]

  @@map("movie")
}

model Audio {
  id       Int              @id @default(autoincrement())
  language String           @unique @db.VarChar(10)
  movies   AudiosOnMovies[]

  @@map("audio")
}

model AudiosOnMovies {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  audio   Audio @relation(fields: [audioId], references: [id])
  audioId Int

  @@id([movieId, audioId])
  @@map("movie_audio")
}

model Subtitle {
  id       Int                 @id @default(autoincrement())
  language String              @unique @db.VarChar(10)
  movies   SubtitlesOnMovies[]

  @@map("subtitle")
}

model SubtitlesOnMovies {
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    Int
  subtitle   Subtitle @relation(fields: [subtitleId], references: [id])
  subtitleId Int

  @@id([movieId, subtitleId])
  @@map("movie_subtitle")
}

model Genre {
  id     Int              @id @default(autoincrement())
  name   String           @unique @db.VarChar(10)
  movies GenresOnMovies[]

  @@map("genre")
}

model GenresOnMovies {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([movieId, genreId])
  @@map("movie_genre")
}

model Actor {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(20)
  nameAlternative String?          @db.VarChar(40)
  movies          ActorsOnMovies[]

  @@map("actor")
}

model ActorsOnMovies {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  actor   Actor @relation(fields: [actorId], references: [id])
  actorId Int

  @@id([movieId, actorId])
  @@map("movie_actor")
}

model Director {
  id              Int                 @id @default(autoincrement())
  name            String              @unique @db.VarChar(20)
  nameAlternative String?             @db.VarChar(40)
  movies          DirectorsOnMovies[]

  @@map("director")
}

model DirectorsOnMovies {
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    Int
  director   Director @relation(fields: [directorId], references: [id])
  directorId Int

  @@id([movieId, directorId])
  @@map("movie_director")
}
