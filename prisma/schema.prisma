// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(254)
  password      String
  roles         RolesOnUsers[]
  profile       Profile?
  oauthProfiles OAuthProfile[]

  @@map("user")
}

model Role {
  id    Int            @id @default(autoincrement())
  name  String         @unique @db.VarChar(16)
  users RolesOnUsers[]

  @@map("role")
}

model RolesOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp(3)
  assignedBy String   @map("assigned_by") @db.VarChar(16)

  @@id([userId, roleId])
  @@map("user_role")
}

model Profile {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique @map("user_id")
  firstName   String   @map("first_name") @db.VarChar(16)
  lastName    String   @map("last_name") @db.VarChar(16)
  phoneNumber String   @map("phone_number") @db.VarChar(10)
  dateOfBirth DateTime @map("date_of_birth") @db.Date
  avatarURL   String   @map("avatar_url")

  @@map("profile")
}

model OAuthProfile {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int           @map("user_id")
  provider   OAuthProvider @relation(fields: [providerId], references: [id])
  providerId Int           @map("provider_id")

  @@map("oauth_profile")
}

model OAuthProvider {
  id       Int            @id @default(autoincrement())
  name     String         @unique @db.VarChar(20)
  profiles OAuthProfile[]

  @@map("oauth_provider")
}

model Movie {
  id                     Int                 @id @default(autoincrement())
  title                  String              @db.VarChar(30)
  titleAlternative       String?             @map("title_alternative") @db.VarChar(50)
  description            String              @db.VarChar(400)
  descriptionAlternative String?             @map("description_alternaitve") @db.VarChar(600)
  duration               Int                 @db.SmallInt
  posterURLs             String[]            @map("poster_urls")
  trailerURLs            String[]            @map("trailer_urls")
  maturityRating         MaturityRating      @relation(fields: [maturityRatingId], references: [id])
  maturityRatingId       Int                 @map("maturity_rating_id")
  genres                 GenresOnMovies[]
  actors                 ActorsOnMovies[]
  directors              DirectorsOnMovies[]
  languages              LanguagesOnMovies[]

  @@map("movie")
}

model MaturityRating {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(4) // G, P, PG12, PG15, R
  movies Movie[]

  @@map("maturity_rating")
}

model Genre {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(20)
  nameAlternative String?          @map("name_alternative") @db.VarChar(40)
  movies          GenresOnMovies[]

  @@map("genre")
}

model GenresOnMovies {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int   @map("movie_id")
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int   @map("genre_id")

  @@id([movieId, genreId])
  @@map("movie_genre")
}

model Actor {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(20)
  nameAlternative String?          @map("name_alternative") @db.VarChar(40)
  movies          ActorsOnMovies[]

  @@map("actor")
}

model ActorsOnMovies {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int   @map("movie_id")
  actor   Actor @relation(fields: [actorId], references: [id])
  actorId Int   @map("actor_id")

  @@id([movieId, actorId])
  @@map("movie_actor")
}

model Director {
  id              Int                 @id @default(autoincrement())
  name            String              @db.VarChar(20)
  nameAlternative String?             @map("name_alternative") @db.VarChar(40)
  movies          DirectorsOnMovies[]

  @@map("director")
}

model DirectorsOnMovies {
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    Int      @map("movie_id")
  director   Director @relation(fields: [directorId], references: [id])
  directorId Int      @map("director_id")

  @@id([movieId, directorId])
  @@map("movie_director")
}

model Language {
  id              Int                 @id @default(autoincrement())
  name            String              @db.VarChar(20)
  nameAlternative String?             @map("name_alternative") @db.VarChar(40)
  movies          LanguagesOnMovies[]

  @@map("language")
}

model LanguagesOnMovies {
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    Int      @map("movie_id")
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int      @map("language_id")

  @@id([movieId, languageId])
  @@map("movie_language")
}
